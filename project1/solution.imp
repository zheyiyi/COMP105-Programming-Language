;; Name:Zheyi Yi 
;; Date due:01/31/2017
;; Comp105 Assignment 1: Induction and Recursion Using an Imperative Core
;; File: solution.imp
;; Purpose: Reinforcement programming exercises with induction and recursion
;; using imperative core 


;;============================================================
;;
;; Problem 4
;;
;;============================================================
;; (sigma m n) is given two integers m and n; it returns the sum
;; (m+(m+1)+....+n) if m<n;else if m=n; else if m=n; it returns m
;; else it rerturns 0; 

;; Examples and tests:(check-expect (sigma 98 34) 0) checks whether
;; the function of sigma works at the condition m>n; (check-expect 
;; (sigma 104 104) 104) checks whether the function of sigma works 
;; at the condition m=n(base case); (check-expect (sigma 18 26) 198) 
;; checks whether the function of sigma works at the condition m<n
;; (inductive case); (check-expect (sigma -15 30) 345) checks whether
;; the function of sigma works at the condition m is negative. The 
;; difference between both integers m and n have three possibilities
;; m>n,m<n and m=0; so the check-expects above are enough to prove 
;; the sigma function works very well 

;; Function Definition: the function sigma (m n) given two integer 
;; inputs m and n calculates the value of sum(m+(m+1)+....+n)

(define sigma (m n)
  (if (> m n)
    0
    (+ m (sigma (+ m 1) n))))

(check-expect (sigma 98 34) 0)
(check-expect (sigma 104 104) 104)
(check-expect (sigma 18 26) 198)
(check-expect (sigma -15 30) 345)
(check-expect (sigma -1000 10000) 49504500)

;; Analysis of the induction:
;; Base case: m when m = n,where both m and n are integers
;; Inductive steps: sigma (m n)=m+sigma((m+1) n), when m<n; 
;; sigma (m n) is the sum(m+(m+1)+...+n) and sigma ((m+1) n) 
;; is the sum((m+1)+(m+2)+...+n), the difference between them is m.



;;============================================================
;;
;; Problem 5
;;
;;============================================================
;; (exp b n) is given two integers b and n; it returns b^n if b>0 and
;; n>0; else if b>0 and n=0, it returns 1;else it returns 0;

;; Examples and tests:(check-expect (exp 2 7) 128) checks whether it 
;; returns b^n at the condition b>0 and n>0(inductive case); (check-expect 
;; (exp 362 0) 1) checks whether it returns 1 at the condition b>0 and 
;; n=0(base case); (check-expect (exp 0 7) 0) (check-expect (exp -5 9) 0) 
;; and (check-expect (exp 469 -4) 0) checks whether it rerturns 0 at the 
;; condition b<=0 or n<0; The valid inputs are b>0 and n>=0 and invalid 
;; inputs are b<=0 or n<0. These check-expects checks all possibilities 
;; so it is enough to prove the fuction works


;; Function Definition: the function exp(b n) given two integer inputs 
;; calculates the value of b^n when b>=0 and n>=0 

(define exp(b n)
  (if (or (not (> b 0)) (< n 0))
    0
    (if (= n 0)
    1
    (* b (exp b (- n 1))))))

(check-expect (exp 2 7) 128)
(check-expect (exp 362 0) 1)    
(check-expect (exp 0 7) 0)
(check-expect (exp -5 9) 0)  
(check-expect (exp 469 -4) 0)

;; Analysis of the induction:
;; Base case: 1 when n=0
;; Inductive case:  b^n=b*b^(n-1) when b>0 and n>0

;;============================================================
;; (log b n) is given two integer b and n; it returns the smallest 
;; integer m such that b^(n+1)>n if b>1 and n>0; else it returns 0 

;; Examples and tests: (check-expect (log 1 13) -1) checks whether
;; returns -1 at the condition b<=1(invalid condition);  
;; (check-expect (log 6 0) -1) checks whether it returns -1 at the
;; conditon n<=0(invalid condition); (check-expect (log 6 3) 0) 
;; checks whether it returns 0 at the condition b>1,n>0 and b>n(base case)
;; (check-expect (log 3 40) 3) checks whether it returns the smaleest 
;; integer m such that b^(n+1)>n at the condition b>1 and n>0;
;; The valid inputs are b>1 and n>0(including base case and inductive steps)
;; and others are invalid, my check-ecpects check all the cases so 
;; the fucntion works


;; Definition: the function of log (b n) given two integers b and n
;; calculates the samllest integer m such that b^(n+1)>n  when b>1 
;; and n>0

(define log(b n)
    (if (or (not (> b 1)) (not (> n 0)))
      -1
      (if (> b n)
        0
        (+ 1 (log b (/ n b))))))

(check-expect (log 1 13) -1)
(check-expect (log 6 0) -1)
(check-expect (log 6 3) 0)
(check-expect (log 3 40) 3)

;; Analysis of the induction:
;;  base case: 0 when b>n
;;  inductive case: log(b n)=1+(log b (n/b))
        


;;============================================================
;;
;; Problem 7
;;
;;============================================================
;; (fib m) is given a natural number m; it returns fib(m)=fib(m-1)
;; +fib(m-2) if m >1,else if m=0; it returns 0;else it returns 1

;; Examples and tests:(check-expect (fib 15) 610) checks whether it
;; returns fib(n)=fib(n-1)+fib(n-2) at the condition m >1(inductive 
;; steps); (check-expect (fib 0) 0) checks whether it returns 0 at 
;; the condition m=0(base case); (check-expect (fib 1) 1) check 
;; whethers it returns 1 at the cindition m=1(base case); For the 
;; fib(m) fuction, there are three possibilities,m=0,m=1,m>1. My 
;; checks-ecpects above check all the three cases so it is enough to
;; prove the fuction works


;; Function Definition: The function fib(m) give a natural number m
;; calculates the value of Fibonacci numbers when the number is m

(define fib(m)
  (if (= m 0)
    0
    (if (= m 1)
      1
      (+ (fib (- m 1)) (fib (- m 2))))))

(check-expect (fib 15) 610)
(check-expect (fib 0) 0)
(check-expect (fib 1) 1)

;; Analysis of the induction:
;; Base case:  0 when m=0  
;;             1 when m=1
;; Inductive steps: fib(m)=fib(m-1)+fib(m-2) when m>1 where m is a 
;; natural number



;;============================================================
;;
;; Problem 8
;;
;;============================================================
;; (prime? n) is given an integer n; it returns 1 if n is prime; else
;; it returns 0

;; Examples and tests:(check-expect (prime? 1) 0) checks whether it 
;; returns 0 at the condition n<2(invalid inputs); (check-expect (prime? 2) 1)
;; checks whether it returns 1 at the condition n=2(base case);
;; (check-expect (prime? 24) 0) checks whether it returns 0 at the 
;; condition n is not a prime, (check-expect (prime? 17) 1) checks 
;; whether it returns 1 at the condition n is a prime(indutive steps)
;; For the prime? fucntion, there are four cases: base case n=2, n<2, 
;; n is prime when n>2,n is not prime when n>2. All cases have been 
;; checked by my check-expects so it proved my funtion works 
 

;; Function Definition: the function prime?(n) given an integer n checks
;; whether a integer n is prime

(define prime?(n)
  (if (< n 2)
    0
    (if (= n 2)
      1;
      (prime?Helper n 2))))

(check-expect (prime? 1) 0)
(check-expect (prime? 2) 1)
(check-expect (prime? 24) 0) 
(check-expect (prime? 17) 1)

;; Function Definition: the function prime?Helper (m n) given a integer
;; m and n=2 as helper function of prime? check whether there are any 
;; number whose squire is less than m can be divided or not. If there
;; is no this number, m is a prime

;; Examples and tests:(check-expect (prime?Helper 21 3) 0) checks whether
;; it returns 0 at the condition m%n=0(base case); 
;; (check-expect (prime?Helper 11 4) 1) checks whether it returns 1 at 
;; the condition n^2=m(base case); (check-expect (prime?Helper 21 4) 1)
;; checks whether it returns 1 at the conditon n^2<m(inductive steps) 
;; There are three possibilities: m%n=0,n^2>m and n^2<m. My checks-expects
;; cover all these cases so it is enough to prove that the fuction works

(define prime?Helper (m n)
  (if (= (mod m n) 0)
    0
    (if (> (* n n) m)
      1
      (prime?Helper m (+ n 1)))))

(check-expect (prime?Helper 21 3 ) 0)
(check-expect (prime?Helper 11 4) 1)
(check-expect (prime?Helper 21 4) 1)

;; Analysis of the induction:
;; Base case: 0 when m%n=0
;;            1 when n^2>m, where both both n and m are postive integers
;; where n>=2
;; Inductive case: prime?Helper (m n)= prime?Helper(m (n+1)) where n^2<m
;; and m%n!=0


;;============================================================
;; (nthprime n) is given a natural number n; it returns the value of the
;; nth prime number if n>=1, else it returns 0

;; Examples and tests:(check-expect (nthprime -3) 0) check whether it 
;; returns 0 at the condition n<0 (invalid input);
;; (check-expect (nthprime 1) 2)  check whether it return 2 at the 
;; condition n=1(base case); (check-expect (nthprime 5) 11) check whether
;; it returns the value of the nth prime number at the condition  n>1
;; (inductive steps); There are three possibilities, n>1,n=1,n<1.All 
;; cases have been checked by my check-expects so it proved my funtion works


;; Function Definition The function nthprime(n) given a natural number n 
;; returns the value of the nth prime number
  
(define nthprime (n)
  (if (< n 1)
    0
    (if (= n 1)
      2
      (nthprimeHelper 3 (- n 1)))))

(check-expect (nthprime -3) 0)
(check-expect (nthprime 1) 2) 
(check-expect (nthprime 5) 11)

;; Function Definition: nthprimeHelper (m n) as helper function of nthprime
;; given two natural numbers m(m>=3) and n(n>1) return the value of the 
;; nth prime;it returns the value of the nth prime if n = 1,else if m is 
;; prime, it returns nthprimeHelper ((m+2) (n- 1));else it returns 
;; nthprimeHelper ((m+2) n)

;; Examples and tests:(check-expect (nthprimeHelper 5 1) 5) check whether
;; it returns m at the condition n=1 (base case)
;; (check-expect (nthprimeHelper 13 3) 19) check whether it returns n at
;; the condition n>1(inductive steps); there are two possibilities: n=1 
;; or n!=1. My check-expects tests all the cases so it can prove the 
;; function works

(define nthprimeHelper (m n)
  (if (prime? m)
    (if (= n 1)
      m
      (nthprimeHelper (+ m 2) (- n 1)))
    (nthprimeHelper (+ m 2) n))) 

(check-expect (nthprimeHelper 5 1) 5)
(check-expect (nthprimeHelper 13 3) 19)

;; Analysis of the induction:
;; Base case: m when n=1 and m>=3
;; Inductive steps: nthprimeHelper (m n) = nthprimeHelper ((m+2) n) if 
;; m is not prime
;;                  nthprimeHelper (m n) = nthprimeHelper ((m+2) (n-1))
;; if m is prime



;;============================================================
;; (sumprimes n) is given an natural number n, it returns the sum of 
;; the first n primes if n>=1; else it returns 0

;; Examples and tests:(check-expect (sumprimes 0) 0) checks whether
;; it returns 0 if n=0(base case); (check-expect (sumprimes 4) 17)
;; checks it returns the sum of the first n primes at the condition
;; n>=1(inductive steps)
;; There are two possibilities: n>=1 or n=0. My check-expects contain
;; all the cases so it is enough to prove the function works


;; Function Definition The function sumprimes(n) given an natural number
;; n calculates the sum of the first nth prime

(define sumprimes(n)
  (if (= n 0)
    0
    (+ (nthprime n) (sumprimes (- n 1)))))

(check-expect (sumprimes 0) 0)
(check-expect (sumprimes 4) 17)

;; Analysis of the induction:
;; Base case: 0 when n=0
;; Inductive steps: sumprimes(n)=nthprime(n)+sumprimes(n-1) when n>=1, 
;; where n is a natural number; sumprimes (n) which is the sum of first 
;; n primes is equal to (sumprimes (n-1) which is the sum of first n-1
;; primes plus nthprime(n) which is the value of the nth prime)

;;============================================================
;; (relprime? m n) is given two natural numbers m and n; it returns 1 if
;; m and n are relatively prime; else it returns 0

;; Examples and tests: (check-expect (relprime? 17 13) 1) check whether 
;; it returns 1 if m=17 and n=13 are relative prime
;; (check-expect (relprime? 24 12) 0) check whether it returns 0 if m=24
;; and n=12 are not relatively prime; There are two possibilities: m and 
;; n are relatively prime or not. My check-expects contains the two cases
;; so it is enough to prove the function works


;; Function Definition the function relprime?(m n) checks whether natural
;; number m and n are relatively prime

(define relprime?(m n)
  (if (= (gcd m n) 1)
    1
    0))

(check-expect (relprime? 17 13) 1)
(check-expect (relprime? 24 12) 0) 

;; Function Definition: the function gcd(m n) given two natural numbers 
;; calculates the value of the greatest common divisor of m and n; it 
;; returns m if n is 0; else it returns the value of the greatesst common
;; divisor of m and n

;; Examples and tests: (check-expect (gcd 24 0) 24) checks whether it returns 
;; 24 at the condition n=0(base case); (check-expect (gcd 17 13) 1) checks 
;; whether it returns 1 at the condition m and n are relatve prime 
;; (check-expect (gcd 8 6) 2) checks whether it returns the greatest common
;; divisor at the condition m and n have the common greatest common divisor
;; expect 1

(define gcd (m n)
  (if (= n 0)
    m
    (gcd n (mod m n))))

(check-expect (gcd 24 0) 24)
(check-expect (gcd 17 13) 1)
(check-expect (gcd 8 6) 2)

;; Analysis of the induction:
;; Base case: m when n=0
;; Inductive steps: gcd (m n)=gcd(n (mod m n)) where m and n are two natural
;; numbers; The greatest commmon divisor (m n) is euqal to the greatest common
;; divisor (n (m%n)) 




;;============================================================
;;
;; Problem 10
;;
;;============================================================
;; (binary m) is given an integer m; it returns binary representation of 
;; decimal representation m if m>0; else if m<0; it returns negative value of
;; binary representation of decimal representation -m;else it returns 0
 
;; Examples and tests:(check-expect (binary 0) 0)  checks whether it returns 0
;; at the condition m=0(base case); (check-expect (binary -168) -10101000)
;; checks whether it returns negative value of binary representation of decimal 
;; representation -m at the condition  m<0(inductive steps); (check-expect
;; (binary 168) 10101000) checks whether it returns  binary representation of 
;; decimal representation at the condition  m>0 (inductive steps); There are 
;; three possibilities for input integer m, m>0;m<0;m=0, my check-expects 
;; contain all the cases so the function works


;; Definition:the function binary (m) given a integer m caculate the binary 
;; representation of decimal representation integer m

(define binary (m)
  (if (= m 0)
    0
    (if (< m 0)
      (* -1 (binary (* -1 m)))
      (+ (* (binary (/ m 2)) 10) (mod m 2)))))

(check-expect (binary 0) 0)
(check-expect (binary -168) -10101000)
(check-expect (binary 168) 10101000)

;; Analysis of the induction:
;; Base case: 0 when m=0
;; Inductive steps: binary (m)= -(10*binary(-m/2)+(-m%2)) when m<0 where m is
;; an integer
;;                  binary (m)= 10*binary(m/2)+(m%2) when m>0 where m is an 
;; integer



;;============================================================
;;
;; Problem DD
;;
;;============================================================
;; (double-digit n) is given a positive integer n at most 30,000; it returns
;; a positive integer whose decimal representation is the same as the decimal 
;; representation of the input n except each digit appears twice; else it
;; returns 0 

;; Examples and tests:(check-expect (double-digit 33331) 0) checks whether it
;; returns 0 at the condition n>30,000; (check-expect (double-digit 7) 77) 
;; checks whether it returns 11*n at the condition n/10=0(base case); 
;; (check-expect (double-digit 23780) 2233778800) checks whether it returns a
;; positive integer with each digit appears twice at the condition n<=30,000
;; (inductive case); There are three possibilities for a positive integer n
;; n>30,000,n<=30,000 and n<10; My check-expects contain all the cases so the
;; function works


;; Definition: the function double-digit (n) given a positive integer n at most
;; 30,000 returns a positive integer whose decimal representation is the same as
;; the decimal representation of the input n except each digit appears twice

(define double-digit (n)
  (if (> n 30000)
    0
    (if (< n 10) 
      (* n 11) 
      (+ (* (double-digit (/ n 10)) 100) (* (mod n 10) 11)))))

(check-expect (double-digit 33331) 0)
(check-expect (double-digit 7) 77)
(check-expect (double-digit 23780) 2233778800)

;; Analysis of the induction:
;; Base case: n*11 when n/10=0
;; Inductive steps: double-digit(n)=double-digit(n/10)*100+(n%10)*11 where 
;; n/10>0 and n is possitive integer at most 30,000 
